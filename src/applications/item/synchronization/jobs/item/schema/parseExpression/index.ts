// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttributeDefinitionFromDiscriminatorValue, serializeAttributeDefinition, type AttributeDefinition } from '../../../../../../../models/attributeDefinition';
import { createExpressionInputObjectFromDiscriminatorValue, serializeExpressionInputObject, type ExpressionInputObject } from '../../../../../../../models/expressionInputObject';
import { type ODataError } from '../../../../../../../models/oDataErrors';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError } from '../../../../../../../models/oDataErrors/oDataError';
import { createParseExpressionResponseFromDiscriminatorValue, deserializeIntoParseExpressionResponse, serializeParseExpressionResponse, type ParseExpressionResponse } from '../../../../../../../models/parseExpressionResponse';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createParseExpressionPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoParseExpressionPostRequestBody;
}
export function deserializeIntoParseExpressionPostRequestBody(parseExpressionPostRequestBody: ParseExpressionPostRequestBody | undefined = {} as ParseExpressionPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "expression": n => { parseExpressionPostRequestBody.expression = n.getStringValue(); },
        "targetAttributeDefinition": n => { parseExpressionPostRequestBody.targetAttributeDefinition = n.getObjectValue<AttributeDefinition>(createAttributeDefinitionFromDiscriminatorValue); },
        "testInputObject": n => { parseExpressionPostRequestBody.testInputObject = n.getObjectValue<ExpressionInputObject>(createExpressionInputObjectFromDiscriminatorValue); },
    }
}
export interface ParseExpressionPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The expression property
     */
    expression?: string;
    /**
     * The targetAttributeDefinition property
     */
    targetAttributeDefinition?: AttributeDefinition;
    /**
     * The testInputObject property
     */
    testInputObject?: ExpressionInputObject;
}
export function serializeParseExpressionPostRequestBody(writer: SerializationWriter, parseExpressionPostRequestBody: ParseExpressionPostRequestBody | undefined = {} as ParseExpressionPostRequestBody) : void {
    writer.writeStringValue("expression", parseExpressionPostRequestBody.expression);
    writer.writeObjectValue<AttributeDefinition>("targetAttributeDefinition", parseExpressionPostRequestBody.targetAttributeDefinition, serializeAttributeDefinition);
    writer.writeObjectValue<ExpressionInputObject>("testInputObject", parseExpressionPostRequestBody.testInputObject, serializeExpressionInputObject);
    writer.writeAdditionalData(parseExpressionPostRequestBody.additionalData);
}
/**
 * Provides operations to call the parseExpression method.
 */
export class ParseExpressionRequestBuilder extends BaseRequestBuilder {
    /**
     * Instantiates a new ParseExpressionRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/applications/{application%2Did}/synchronization/jobs/{synchronizationJob%2Did}/schema/parseExpression");
    };
    /**
     * Parse a given string expression into an attributeMappingSource object. For more information about expressions, see Writing Expressions for Attribute Mappings in Microsoft Entra ID.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ParseExpressionResponse
     * @see {@link https://learn.microsoft.com/graph/api/synchronization-synchronizationschema-parseexpression?view=graph-rest-1.0|Find more info here}
     */
    public post(body: ParseExpressionPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ParseExpressionResponse | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<ParseExpressionResponse>(requestInfo, createParseExpressionResponseFromDiscriminatorValue, errorMapping);
    };
    /**
     * Parse a given string expression into an attributeMappingSource object. For more information about expressions, see Writing Expressions for Attribute Mappings in Microsoft Entra ID.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: ParseExpressionPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeParseExpressionPostRequestBody);
        return requestInfo;
    };
    /**
     * Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
     * @param rawUrl The raw URL to use for the request builder.
     * @returns a parseExpressionRequestBuilder
     */
    public withUrl(rawUrl: string) : ParseExpressionRequestBuilder {
        if(!rawUrl) throw new Error("rawUrl cannot be undefined");
        return new ParseExpressionRequestBuilder(rawUrl, this.requestAdapter);
    };
}
// tslint:enable
// eslint-enable
