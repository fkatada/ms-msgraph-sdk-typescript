// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDriveRecipientFromDiscriminatorValue, createPermissionFromDiscriminatorValue, deserializeIntoPermission, serializeDriveRecipient, serializePermission, type DriveRecipient, type Permission } from '../../../../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../../../../../../../models/oDataErrors/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCreateLinkPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCreateLinkPostRequestBody;
}
export interface CreateLinkPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The expirationDateTime property
     */
    expirationDateTime?: Date;
    /**
     * The message property
     */
    message?: string;
    /**
     * The password property
     */
    password?: string;
    /**
     * The recipients property
     */
    recipients?: DriveRecipient[];
    /**
     * The retainInheritedPermissions property
     */
    retainInheritedPermissions?: boolean;
    /**
     * The scope property
     */
    scope?: string;
    /**
     * The sendNotification property
     */
    sendNotification?: boolean;
    /**
     * The type property
     */
    type?: string;
}
export function deserializeIntoCreateLinkPostRequestBody(createLinkPostRequestBody: CreateLinkPostRequestBody | undefined = {} as CreateLinkPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "expirationDateTime": n => { createLinkPostRequestBody.expirationDateTime = n.getDateValue(); },
        "message": n => { createLinkPostRequestBody.message = n.getStringValue(); },
        "password": n => { createLinkPostRequestBody.password = n.getStringValue(); },
        "recipients": n => { createLinkPostRequestBody.recipients = n.getCollectionOfObjectValues<DriveRecipient>(createDriveRecipientFromDiscriminatorValue); },
        "retainInheritedPermissions": n => { createLinkPostRequestBody.retainInheritedPermissions = n.getBooleanValue(); },
        "scope": n => { createLinkPostRequestBody.scope = n.getStringValue(); },
        "sendNotification": n => { createLinkPostRequestBody.sendNotification = n.getBooleanValue(); },
        "type": n => { createLinkPostRequestBody.type = n.getStringValue(); },
    }
}
export function serializeCreateLinkPostRequestBody(writer: SerializationWriter, createLinkPostRequestBody: CreateLinkPostRequestBody | undefined = {} as CreateLinkPostRequestBody) : void {
    writer.writeDateValue("expirationDateTime", createLinkPostRequestBody.expirationDateTime);
    writer.writeStringValue("message", createLinkPostRequestBody.message);
    writer.writeStringValue("password", createLinkPostRequestBody.password);
    writer.writeCollectionOfObjectValues<DriveRecipient>("recipients", createLinkPostRequestBody.recipients, serializeDriveRecipient);
    writer.writeBooleanValue("retainInheritedPermissions", createLinkPostRequestBody.retainInheritedPermissions);
    writer.writeStringValue("scope", createLinkPostRequestBody.scope);
    writer.writeBooleanValue("sendNotification", createLinkPostRequestBody.sendNotification);
    writer.writeStringValue("type", createLinkPostRequestBody.type);
    writer.writeAdditionalData(createLinkPostRequestBody.additionalData);
}
/**
 * Provides operations to call the createLink method.
 */
export class CreateLinkRequestBuilder extends BaseRequestBuilder<CreateLinkRequestBuilder> {
    /**
     * Instantiates a new CreateLinkRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/lists/{list%2Did}/items/{listItem%2Did}/createLink", (x, y) => new CreateLinkRequestBuilder(x, y));
    }
    /**
     * Invoke action createLink
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Permission
     */
    public post(body: CreateLinkPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Permission | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<Permission>(requestInfo, createPermissionFromDiscriminatorValue, errorMapping);
    }
    /**
     * Invoke action createLink
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: CreateLinkPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeCreateLinkPostRequestBody);
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
