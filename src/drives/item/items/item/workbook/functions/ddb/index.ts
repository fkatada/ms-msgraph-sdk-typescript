// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type ODataError } from '../../../../../../../models/oDataErrors';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError } from '../../../../../../../models/oDataErrors/oDataError';
import { createWorkbookFunctionResultFromDiscriminatorValue, deserializeIntoWorkbookFunctionResult, serializeWorkbookFunctionResult, type WorkbookFunctionResult } from '../../../../../../../models/workbookFunctionResult';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDdbPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDdbPostRequestBody;
}
export interface DdbPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The cost property
     */
    cost?: Json;
    /**
     * The factor property
     */
    factor?: Json;
    /**
     * The life property
     */
    life?: Json;
    /**
     * The period property
     */
    period?: Json;
    /**
     * The salvage property
     */
    salvage?: Json;
}
export function deserializeIntoDdbPostRequestBody(ddbPostRequestBody: DdbPostRequestBody | undefined = {} as DdbPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "cost": n => { ddbPostRequestBody.cost = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "factor": n => { ddbPostRequestBody.factor = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "life": n => { ddbPostRequestBody.life = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "period": n => { ddbPostRequestBody.period = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "salvage": n => { ddbPostRequestBody.salvage = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeDdbPostRequestBody(writer: SerializationWriter, ddbPostRequestBody: DdbPostRequestBody | undefined = {} as DdbPostRequestBody) : void {
    writer.writeObjectValue<Json>("cost", ddbPostRequestBody.cost, serializeJson);
    writer.writeObjectValue<Json>("factor", ddbPostRequestBody.factor, serializeJson);
    writer.writeObjectValue<Json>("life", ddbPostRequestBody.life, serializeJson);
    writer.writeObjectValue<Json>("period", ddbPostRequestBody.period, serializeJson);
    writer.writeObjectValue<Json>("salvage", ddbPostRequestBody.salvage, serializeJson);
    writer.writeAdditionalData(ddbPostRequestBody.additionalData);
}
/**
 * Provides operations to call the ddb method.
 */
export class DdbRequestBuilder extends BaseRequestBuilder {
    /**
     * Instantiates a new DdbRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/functions/ddb");
    };
    /**
     * Invoke action ddb
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WorkbookFunctionResult
     */
    public post(body: DdbPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WorkbookFunctionResult | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<WorkbookFunctionResult>(requestInfo, createWorkbookFunctionResultFromDiscriminatorValue, errorMapping);
    };
    /**
     * Invoke action ddb
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: DdbPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeDdbPostRequestBody);
        return requestInfo;
    };
    /**
     * Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
     * @param rawUrl The raw URL to use for the request builder.
     * @returns a ddbRequestBuilder
     */
    public withUrl(rawUrl: string) : DdbRequestBuilder {
        if(!rawUrl) throw new Error("rawUrl cannot be undefined");
        return new DdbRequestBuilder(rawUrl, this.requestAdapter);
    };
}
// tslint:enable
// eslint-enable
