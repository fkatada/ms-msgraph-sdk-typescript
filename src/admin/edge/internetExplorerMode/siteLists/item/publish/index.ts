// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createBrowserSharedCookieFromDiscriminatorValue, createBrowserSiteFromDiscriminatorValue, createBrowserSiteListFromDiscriminatorValue, deserializeIntoBrowserSiteList, serializeBrowserSharedCookie, serializeBrowserSite, serializeBrowserSiteList, type BrowserSharedCookie, type BrowserSite, type BrowserSiteList } from '../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../../../../models/oDataErrors/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPublishPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoPublishPostRequestBody;
}
export function deserializeIntoPublishPostRequestBody(publishPostRequestBody: PublishPostRequestBody | undefined = {} as PublishPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "revision": n => { publishPostRequestBody.revision = n.getStringValue(); },
        "sharedCookies": n => { publishPostRequestBody.sharedCookies = n.getCollectionOfObjectValues<BrowserSharedCookie>(createBrowserSharedCookieFromDiscriminatorValue); },
        "sites": n => { publishPostRequestBody.sites = n.getCollectionOfObjectValues<BrowserSite>(createBrowserSiteFromDiscriminatorValue); },
    }
}
export interface PublishPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The revision property
     */
    revision?: string;
    /**
     * The sharedCookies property
     */
    sharedCookies?: BrowserSharedCookie[];
    /**
     * The sites property
     */
    sites?: BrowserSite[];
}
export function serializePublishPostRequestBody(writer: SerializationWriter, publishPostRequestBody: PublishPostRequestBody | undefined = {} as PublishPostRequestBody) : void {
    writer.writeStringValue("revision", publishPostRequestBody.revision);
    writer.writeCollectionOfObjectValues<BrowserSharedCookie>("sharedCookies", publishPostRequestBody.sharedCookies, serializeBrowserSharedCookie);
    writer.writeCollectionOfObjectValues<BrowserSite>("sites", publishPostRequestBody.sites, serializeBrowserSite);
    writer.writeAdditionalData(publishPostRequestBody.additionalData);
}
/**
 * Provides operations to call the publish method.
 */
export class PublishRequestBuilder extends BaseRequestBuilder<PublishRequestBuilder> {
    /**
     * Instantiates a new PublishRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/admin/edge/internetExplorerMode/siteLists/{browserSiteList%2Did}/publish", (x, y) => new PublishRequestBuilder(x, y));
    }
    /**
     * Publish the specified browserSiteList for devices to download.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of BrowserSiteList
     * @see {@link https://learn.microsoft.com/graph/api/browsersitelist-publish?view=graph-rest-1.0|Find more info here}
     */
    public post(body: PublishPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<BrowserSiteList | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<BrowserSiteList>(requestInfo, createBrowserSiteListFromDiscriminatorValue, errorMapping);
    }
    /**
     * Publish the specified browserSiteList for devices to download.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: PublishPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializePublishPostRequestBody);
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
