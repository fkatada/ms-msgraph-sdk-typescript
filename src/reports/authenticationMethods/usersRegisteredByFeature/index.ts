// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createUserRegistrationFeatureSummaryFromDiscriminatorValue, type UserRegistrationFeatureSummary } from '../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../models/oDataErrors/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to call the usersRegisteredByFeature method.
 */
export class UsersRegisteredByFeatureRequestBuilder extends BaseRequestBuilder<UsersRegisteredByFeatureRequestBuilder> {
    /**
     * Instantiates a new UsersRegisteredByFeatureRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/reports/authenticationMethods/usersRegisteredByFeature()", (x, y) => new UsersRegisteredByFeatureRequestBuilder(x, y));
    }
    /**
     * Invoke function usersRegisteredByFeature
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of UserRegistrationFeatureSummary
     */
    public get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UserRegistrationFeatureSummary | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<UserRegistrationFeatureSummary>(requestInfo, createUserRegistrationFeatureSummaryFromDiscriminatorValue, errorMapping);
    }
    /**
     * Invoke function usersRegisteredByFeature
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
