// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttackSimulationRepeatOffenderFromDiscriminatorValue, serializeAttackSimulationRepeatOffender, type AttackSimulationRepeatOffender } from '../../../models/attackSimulationRepeatOffender';
import { deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, type BaseCollectionPaginationCountResponse } from '../../../models/baseCollectionPaginationCountResponse';
import { type ODataError } from '../../../models/oDataErrors/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError } from '../../../models/oDataErrors/oDataError';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGetAttackSimulationRepeatOffendersGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGetAttackSimulationRepeatOffendersGetResponse;
}
export function deserializeIntoGetAttackSimulationRepeatOffendersGetResponse(getAttackSimulationRepeatOffendersGetResponse: GetAttackSimulationRepeatOffendersGetResponse | undefined = {} as GetAttackSimulationRepeatOffendersGetResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(getAttackSimulationRepeatOffendersGetResponse),
        "value": n => { getAttackSimulationRepeatOffendersGetResponse.value = n.getCollectionOfObjectValues<AttackSimulationRepeatOffender>(createAttackSimulationRepeatOffenderFromDiscriminatorValue); },
    }
}
export interface GetAttackSimulationRepeatOffendersGetResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: AttackSimulationRepeatOffender[];
}
export interface GetAttackSimulationRepeatOffendersRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export function serializeGetAttackSimulationRepeatOffendersGetResponse(writer: SerializationWriter, getAttackSimulationRepeatOffendersGetResponse: GetAttackSimulationRepeatOffendersGetResponse | undefined = {} as GetAttackSimulationRepeatOffendersGetResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, getAttackSimulationRepeatOffendersGetResponse)
    writer.writeCollectionOfObjectValues<AttackSimulationRepeatOffender>("value", getAttackSimulationRepeatOffendersGetResponse.value, serializeAttackSimulationRepeatOffender);
}
/**
 * Provides operations to call the getAttackSimulationRepeatOffenders method.
 */
export class GetAttackSimulationRepeatOffendersRequestBuilder extends BaseRequestBuilder {
    /**
     * Instantiates a new GetAttackSimulationRepeatOffendersRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/reports/security/getAttackSimulationRepeatOffenders(){?%24top,%24skip,%24search,%24filter,%24count}");
    };
    /**
     * Invoke function getAttackSimulationRepeatOffenders
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of GetAttackSimulationRepeatOffendersGetResponse
     */
    public get(requestConfiguration?: RequestConfiguration<GetAttackSimulationRepeatOffendersRequestBuilderGetQueryParameters> | undefined) : Promise<GetAttackSimulationRepeatOffendersGetResponse | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<GetAttackSimulationRepeatOffendersGetResponse>(requestInfo, createGetAttackSimulationRepeatOffendersGetResponseFromDiscriminatorValue, errorMapping);
    };
    /**
     * Invoke function getAttackSimulationRepeatOffenders
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<GetAttackSimulationRepeatOffendersRequestBuilderGetQueryParameters> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration, getAttackSimulationRepeatOffendersRequestBuilderGetQueryParametersMapper);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    };
    /**
     * Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
     * @param rawUrl The raw URL to use for the request builder.
     * @returns a getAttackSimulationRepeatOffendersRequestBuilder
     */
    public withUrl(rawUrl: string) : GetAttackSimulationRepeatOffendersRequestBuilder {
        if(!rawUrl) throw new Error("rawUrl cannot be undefined");
        return new GetAttackSimulationRepeatOffendersRequestBuilder(rawUrl, this.requestAdapter);
    };
}
const getAttackSimulationRepeatOffendersRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "filter": "%24filter",
    "search": "%24search",
    "skip": "%24skip",
    "top": "%24top",
};
// tslint:enable
// eslint-enable
