/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createUpdateRecordingStatusOperationFromDiscriminatorValue, deserializeIntoUpdateRecordingStatusOperation, RecordingStatus, RecordingStatusObject, serializeUpdateRecordingStatusOperation, type UpdateRecordingStatusOperation } from '../../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../../models/oDataErrors/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUpdateRecordingStatusPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUpdateRecordingStatusPostRequestBody;
}
export function deserializeIntoUpdateRecordingStatusPostRequestBody(updateRecordingStatusPostRequestBody: UpdateRecordingStatusPostRequestBody | undefined = {} as UpdateRecordingStatusPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "clientContext": n => { updateRecordingStatusPostRequestBody.clientContext = n.getStringValue(); },
        "status": n => { updateRecordingStatusPostRequestBody.status = n.getEnumValue<RecordingStatus>(RecordingStatusObject); },
    }
}
export function serializeUpdateRecordingStatusPostRequestBody(writer: SerializationWriter, updateRecordingStatusPostRequestBody: UpdateRecordingStatusPostRequestBody | undefined = {} as UpdateRecordingStatusPostRequestBody) : void {
    writer.writeStringValue("clientContext", updateRecordingStatusPostRequestBody.clientContext);
    writer.writeEnumValue<RecordingStatus>("status", updateRecordingStatusPostRequestBody.status);
    writer.writeAdditionalData(updateRecordingStatusPostRequestBody.additionalData);
}
export interface UpdateRecordingStatusPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The clientContext property
     */
    clientContext?: string;
    /**
     * The status property
     */
    status?: RecordingStatus;
}
/**
 * Provides operations to call the updateRecordingStatus method.
 */
export class UpdateRecordingStatusRequestBuilder extends BaseRequestBuilder<UpdateRecordingStatusRequestBuilder> {
    /**
     * Instantiates a new UpdateRecordingStatusRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/communications/calls/{call%2Did}/updateRecordingStatus", (x, y) => new UpdateRecordingStatusRequestBuilder(x, y));
    }
    /**
     * Update the application's recording status associated with a call. This requires the use of the Teams policy-based recording solution.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of UpdateRecordingStatusOperation
     * @see {@link https://learn.microsoft.com/graph/api/call-updaterecordingstatus?view=graph-rest-1.0|Find more info here}
     */
    public post(body: UpdateRecordingStatusPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UpdateRecordingStatusOperation | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<UpdateRecordingStatusOperation>(requestInfo, createUpdateRecordingStatusOperationFromDiscriminatorValue, errorMapping);
    }
    /**
     * Update the application's recording status associated with a call. This requires the use of the Teams policy-based recording solution.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: UpdateRecordingStatusPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeUpdateRecordingStatusPostRequestBody);
        return requestInfo;
    }
}
/* tslint:enable */
/* eslint-enable */
