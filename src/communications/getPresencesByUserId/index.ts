// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPresenceFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, serializePresence, type BaseCollectionPaginationCountResponse, type Presence } from '../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../models/oDataErrors/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGetPresencesByUserIdPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGetPresencesByUserIdPostRequestBody;
}
export function createGetPresencesByUserIdPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGetPresencesByUserIdPostResponse;
}
export function deserializeIntoGetPresencesByUserIdPostRequestBody(getPresencesByUserIdPostRequestBody: GetPresencesByUserIdPostRequestBody | undefined = {} as GetPresencesByUserIdPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "ids": n => { getPresencesByUserIdPostRequestBody.ids = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export function deserializeIntoGetPresencesByUserIdPostResponse(getPresencesByUserIdPostResponse: GetPresencesByUserIdPostResponse | undefined = {} as GetPresencesByUserIdPostResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(getPresencesByUserIdPostResponse),
        "value": n => { getPresencesByUserIdPostResponse.value = n.getCollectionOfObjectValues<Presence>(createPresenceFromDiscriminatorValue); },
    }
}
export interface GetPresencesByUserIdPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The ids property
     */
    ids?: string[];
}
export interface GetPresencesByUserIdPostResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Presence[];
}
export function serializeGetPresencesByUserIdPostRequestBody(writer: SerializationWriter, getPresencesByUserIdPostRequestBody: GetPresencesByUserIdPostRequestBody | undefined = {} as GetPresencesByUserIdPostRequestBody) : void {
    writer.writeCollectionOfPrimitiveValues<string>("ids", getPresencesByUserIdPostRequestBody.ids);
    writer.writeAdditionalData(getPresencesByUserIdPostRequestBody.additionalData);
}
export function serializeGetPresencesByUserIdPostResponse(writer: SerializationWriter, getPresencesByUserIdPostResponse: GetPresencesByUserIdPostResponse | undefined = {} as GetPresencesByUserIdPostResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, getPresencesByUserIdPostResponse)
    writer.writeCollectionOfObjectValues<Presence>("value", getPresencesByUserIdPostResponse.value, serializePresence);
}
/**
 * Provides operations to call the getPresencesByUserId method.
 */
export class GetPresencesByUserIdRequestBuilder extends BaseRequestBuilder<GetPresencesByUserIdRequestBuilder> {
    /**
     * Instantiates a new GetPresencesByUserIdRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/communications/getPresencesByUserId", (x, y) => new GetPresencesByUserIdRequestBuilder(x, y));
    }
    /**
     * Get the presence information for multiple users.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of GetPresencesByUserIdPostResponse
     * @see {@link https://learn.microsoft.com/graph/api/cloudcommunications-getpresencesbyuserid?view=graph-rest-1.0|Find more info here}
     */
    public post(body: GetPresencesByUserIdPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GetPresencesByUserIdPostResponse | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<GetPresencesByUserIdPostResponse>(requestInfo, createGetPresencesByUserIdPostResponseFromDiscriminatorValue, errorMapping);
    }
    /**
     * Get the presence information for multiple users.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: GetPresencesByUserIdPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeGetPresencesByUserIdPostRequestBody);
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
