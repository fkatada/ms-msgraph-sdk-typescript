// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type ODataError } from '../../../../models/oDataErrors';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError } from '../../../../models/oDataErrors/oDataError';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGetVirtualAppointmentJoinWebUrlGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGetVirtualAppointmentJoinWebUrlGetResponse;
}
export function deserializeIntoGetVirtualAppointmentJoinWebUrlGetResponse(getVirtualAppointmentJoinWebUrlGetResponse: GetVirtualAppointmentJoinWebUrlGetResponse | undefined = {} as GetVirtualAppointmentJoinWebUrlGetResponse) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { getVirtualAppointmentJoinWebUrlGetResponse.value = n.getStringValue(); },
    }
}
export interface GetVirtualAppointmentJoinWebUrlGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: string;
}
export function serializeGetVirtualAppointmentJoinWebUrlGetResponse(writer: SerializationWriter, getVirtualAppointmentJoinWebUrlGetResponse: GetVirtualAppointmentJoinWebUrlGetResponse | undefined = {} as GetVirtualAppointmentJoinWebUrlGetResponse) : void {
    writer.writeStringValue("value", getVirtualAppointmentJoinWebUrlGetResponse.value);
    writer.writeAdditionalData(getVirtualAppointmentJoinWebUrlGetResponse.additionalData);
}
/**
 * Provides operations to call the getVirtualAppointmentJoinWebUrl method.
 */
export class GetVirtualAppointmentJoinWebUrlRequestBuilder extends BaseRequestBuilder {
    /**
     * Instantiates a new GetVirtualAppointmentJoinWebUrlRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/communications/onlineMeetings/{onlineMeeting%2Did}/getVirtualAppointmentJoinWebUrl()");
    };
    /**
     * Invoke function getVirtualAppointmentJoinWebUrl
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of GetVirtualAppointmentJoinWebUrlGetResponse
     */
    public get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GetVirtualAppointmentJoinWebUrlGetResponse | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<GetVirtualAppointmentJoinWebUrlGetResponse>(requestInfo, createGetVirtualAppointmentJoinWebUrlGetResponseFromDiscriminatorValue, errorMapping);
    };
    /**
     * Invoke function getVirtualAppointmentJoinWebUrl
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    };
    /**
     * Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
     * @param rawUrl The raw URL to use for the request builder.
     * @returns a getVirtualAppointmentJoinWebUrlRequestBuilder
     */
    public withUrl(rawUrl: string) : GetVirtualAppointmentJoinWebUrlRequestBuilder {
        if(!rawUrl) throw new Error("rawUrl cannot be undefined");
        return new GetVirtualAppointmentJoinWebUrlRequestBuilder(rawUrl, this.requestAdapter);
    };
}
// tslint:enable
// eslint-enable
