/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { ClonableTeamParts, ClonableTeamPartsObject, TeamVisibilityType, TeamVisibilityTypeObject } from '../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../models/oDataErrors/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ClonePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The classification property
     */
    classification?: string;
    /**
     * The description property
     */
    description?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The mailNickname property
     */
    mailNickname?: string;
    /**
     * The partsToClone property
     */
    partsToClone?: ClonableTeamParts[];
    /**
     * The visibility property
     */
    visibility?: TeamVisibilityType;
}
export function createClonePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoClonePostRequestBody;
}
export function deserializeIntoClonePostRequestBody(clonePostRequestBody: ClonePostRequestBody | undefined = {} as ClonePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "classification": n => { clonePostRequestBody.classification = n.getStringValue(); },
        "description": n => { clonePostRequestBody.description = n.getStringValue(); },
        "displayName": n => { clonePostRequestBody.displayName = n.getStringValue(); },
        "mailNickname": n => { clonePostRequestBody.mailNickname = n.getStringValue(); },
        "partsToClone": n => { clonePostRequestBody.partsToClone = n.getCollectionOfEnumValues<ClonableTeamParts>(ClonableTeamPartsObject); },
        "visibility": n => { clonePostRequestBody.visibility = n.getEnumValue<TeamVisibilityType>(TeamVisibilityTypeObject); },
    }
}
export function serializeClonePostRequestBody(writer: SerializationWriter, clonePostRequestBody: ClonePostRequestBody | undefined = {} as ClonePostRequestBody) : void {
    writer.writeStringValue("classification", clonePostRequestBody.classification);
    writer.writeStringValue("description", clonePostRequestBody.description);
    writer.writeStringValue("displayName", clonePostRequestBody.displayName);
    writer.writeStringValue("mailNickname", clonePostRequestBody.mailNickname);
    writer.writeEnumValue<ClonableTeamParts[]>("partsToClone", clonePostRequestBody.partsToClone);
    writer.writeEnumValue<TeamVisibilityType>("visibility", clonePostRequestBody.visibility);
    writer.writeAdditionalData(clonePostRequestBody.additionalData);
}
/**
 * Provides operations to call the clone method.
 */
export class CloneRequestBuilder extends BaseRequestBuilder<CloneRequestBuilder> {
    /**
     * Instantiates a new CloneRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/teams/{team%2Did}/clone", (x, y) => new CloneRequestBuilder(x, y));
    }
    /**
     * Create a copy of a team. This operation also creates a copy of the corresponding group.You can specify which parts of the team to clone: When tabs are cloned, they aren't configured. The tabs are displayed on the tab bar in Microsoft Teams, and the first time a user opens them, they must go through the configuration screen. If the user who opens the tab doesn't have permission to configure apps, they'll see a message that says that the tab isn't configured. Cloning is a long-running operation. After the POST clone returns, you need to GET the operation returned by the Location: header to see if it's running, succeeded, or failed. You should continue to GET until the status isn't running. The recommended delay between GETs is 5 seconds.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @see {@link https://learn.microsoft.com/graph/api/team-clone?view=graph-rest-1.0|Find more info here}
     */
    public post(body: ClonePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendNoResponseContentAsync(requestInfo, errorMapping);
    }
    /**
     * Create a copy of a team. This operation also creates a copy of the corresponding group.You can specify which parts of the team to clone: When tabs are cloned, they aren't configured. The tabs are displayed on the tab bar in Microsoft Teams, and the first time a user opens them, they must go through the configuration screen. If the user who opens the tab doesn't have permission to configure apps, they'll see a message that says that the tab isn't configured. Cloning is a long-running operation. After the POST clone returns, you need to GET the operation returned by the Location: header to see if it's running, succeeded, or failed. You should continue to GET until the status isn't running. The recommended delay between GETs is 5 seconds.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: ClonePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeClonePostRequestBody);
        return requestInfo;
    }
}
/* tslint:enable */
/* eslint-enable */
