/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../../models/oDataErrors/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Duration, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSetPresencePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSetPresencePostRequestBody;
}
export function deserializeIntoSetPresencePostRequestBody(setPresencePostRequestBody: SetPresencePostRequestBody | undefined = {} as SetPresencePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "activity": n => { setPresencePostRequestBody.activity = n.getStringValue(); },
        "availability": n => { setPresencePostRequestBody.availability = n.getStringValue(); },
        "expirationDuration": n => { setPresencePostRequestBody.expirationDuration = n.getDurationValue(); },
        "sessionId": n => { setPresencePostRequestBody.sessionId = n.getStringValue(); },
    }
}
export function serializeSetPresencePostRequestBody(writer: SerializationWriter, setPresencePostRequestBody: SetPresencePostRequestBody | undefined = {} as SetPresencePostRequestBody) : void {
    writer.writeStringValue("activity", setPresencePostRequestBody.activity);
    writer.writeStringValue("availability", setPresencePostRequestBody.availability);
    writer.writeDurationValue("expirationDuration", setPresencePostRequestBody.expirationDuration);
    writer.writeStringValue("sessionId", setPresencePostRequestBody.sessionId);
    writer.writeAdditionalData(setPresencePostRequestBody.additionalData);
}
export interface SetPresencePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The activity property
     */
    activity?: string;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The availability property
     */
    availability?: string;
    /**
     * The expirationDuration property
     */
    expirationDuration?: Duration;
    /**
     * The sessionId property
     */
    sessionId?: string;
}
/**
 * Provides operations to call the setPresence method.
 */
export class SetPresenceRequestBuilder extends BaseRequestBuilder<SetPresenceRequestBuilder> {
    /**
     * Instantiates a new SetPresenceRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/users/{user%2Did}/presence/setPresence", (x, y) => new SetPresenceRequestBuilder(x, y));
    }
    /**
     * Set the state of a user's presence session as an application.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @see {@link https://learn.microsoft.com/graph/api/presence-setpresence?view=graph-rest-1.0|Find more info here}
     */
    public post(body: SetPresencePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendNoResponseContentAsync(requestInfo, errorMapping);
    }
    /**
     * Set the state of a user's presence session as an application.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: SetPresencePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSetPresencePostRequestBody);
        return requestInfo;
    }
}
/* tslint:enable */
/* eslint-enable */
