/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createProfilePhotoCollectionResponseFromDiscriminatorValue, type ProfilePhotoCollectionResponse } from '../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../models/oDataErrors/';
import { ProfilePhotoItemRequestBuilder } from './item/';
import { BaseRequestBuilder, getPathParameters, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

export interface PhotosRequestBuilderGetQueryParameters {
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Provides operations to manage the photos property of the microsoft.graph.user entity.
 */
export class PhotosRequestBuilder extends BaseRequestBuilder<PhotosRequestBuilder> {
    /**
     * Provides operations to manage the photos property of the microsoft.graph.user entity.
     * @param profilePhotoId The unique identifier of profilePhoto
     * @returns a ProfilePhotoItemRequestBuilder
     */
    public byProfilePhotoId(profilePhotoId: string) : ProfilePhotoItemRequestBuilder {
        if(!profilePhotoId) throw new Error("profilePhotoId cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["profilePhoto%2Did"] = profilePhotoId
        return new ProfilePhotoItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    /**
     * Instantiates a new PhotosRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/users/{user%2Did}/photos{?%24top,%24skip,%24filter,%24orderby,%24select}", (x, y) => new PhotosRequestBuilder(x, y));
    }
    /**
     * The collection of the user's profile photos in different sizes. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ProfilePhotoCollectionResponse
     */
    public get(requestConfiguration?: RequestConfiguration<PhotosRequestBuilderGetQueryParameters> | undefined) : Promise<ProfilePhotoCollectionResponse | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<ProfilePhotoCollectionResponse>(requestInfo, createProfilePhotoCollectionResponseFromDiscriminatorValue, errorMapping);
    }
    /**
     * The collection of the user's profile photos in different sizes. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<PhotosRequestBuilderGetQueryParameters> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration, photosRequestBuilderGetQueryParametersMapper);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    }
}
const photosRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/* tslint:enable */
/* eslint-enable */
