// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDateTimeTimeZoneFromDiscriminatorValue, createScheduleInformationFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, serializeDateTimeTimeZone, serializeScheduleInformation, type BaseCollectionPaginationCountResponse, type DateTimeTimeZone, type ScheduleInformation } from '../../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../../models/oDataErrors/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGetSchedulePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGetSchedulePostRequestBody;
}
export function createGetSchedulePostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGetSchedulePostResponse;
}
export function deserializeIntoGetSchedulePostRequestBody(getSchedulePostRequestBody: GetSchedulePostRequestBody | undefined = {} as GetSchedulePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "availabilityViewInterval": n => { getSchedulePostRequestBody.availabilityViewInterval = n.getNumberValue(); },
        "endTime": n => { getSchedulePostRequestBody.endTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "schedules": n => { getSchedulePostRequestBody.schedules = n.getCollectionOfPrimitiveValues<string>(); },
        "startTime": n => { getSchedulePostRequestBody.startTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
    }
}
export function deserializeIntoGetSchedulePostResponse(getSchedulePostResponse: GetSchedulePostResponse | undefined = {} as GetSchedulePostResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(getSchedulePostResponse),
        "value": n => { getSchedulePostResponse.value = n.getCollectionOfObjectValues<ScheduleInformation>(createScheduleInformationFromDiscriminatorValue); },
    }
}
export interface GetSchedulePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The AvailabilityViewInterval property
     */
    availabilityViewInterval?: number;
    /**
     * The EndTime property
     */
    endTime?: DateTimeTimeZone;
    /**
     * The Schedules property
     */
    schedules?: string[];
    /**
     * The StartTime property
     */
    startTime?: DateTimeTimeZone;
}
export interface GetSchedulePostResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ScheduleInformation[];
}
export function serializeGetSchedulePostRequestBody(writer: SerializationWriter, getSchedulePostRequestBody: GetSchedulePostRequestBody | undefined = {} as GetSchedulePostRequestBody) : void {
    writer.writeNumberValue("AvailabilityViewInterval", getSchedulePostRequestBody.availabilityViewInterval);
    writer.writeObjectValue<DateTimeTimeZone>("EndTime", getSchedulePostRequestBody.endTime, serializeDateTimeTimeZone);
    writer.writeCollectionOfPrimitiveValues<string>("Schedules", getSchedulePostRequestBody.schedules);
    writer.writeObjectValue<DateTimeTimeZone>("StartTime", getSchedulePostRequestBody.startTime, serializeDateTimeTimeZone);
    writer.writeAdditionalData(getSchedulePostRequestBody.additionalData);
}
export function serializeGetSchedulePostResponse(writer: SerializationWriter, getSchedulePostResponse: GetSchedulePostResponse | undefined = {} as GetSchedulePostResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, getSchedulePostResponse)
    writer.writeCollectionOfObjectValues<ScheduleInformation>("value", getSchedulePostResponse.value, serializeScheduleInformation);
}
/**
 * Provides operations to call the getSchedule method.
 */
export class GetScheduleRequestBuilder extends BaseRequestBuilder<GetScheduleRequestBuilder> {
    /**
     * Instantiates a new GetScheduleRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/users/{user%2Did}/calendar/getSchedule", (x, y) => new GetScheduleRequestBuilder(x, y));
    }
    /**
     * Get the free/busy availability information for a collection of users, distributions lists, or resources (rooms or equipment) for a specified time period.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of GetSchedulePostResponse
     * @see {@link https://learn.microsoft.com/graph/api/calendar-getschedule?view=graph-rest-1.0|Find more info here}
     */
    public post(body: GetSchedulePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GetSchedulePostResponse | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<GetSchedulePostResponse>(requestInfo, createGetSchedulePostResponseFromDiscriminatorValue, errorMapping);
    }
    /**
     * Get the free/busy availability information for a collection of users, distributions lists, or resources (rooms or equipment) for a specified time period.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: GetSchedulePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeGetSchedulePostRequestBody);
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
