/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createOnenoteOperationFromDiscriminatorValue, deserializeIntoOnenoteOperation, serializeOnenoteOperation, type OnenoteOperation } from '../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../../../../models/oDataErrors/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CopyToNotebookPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The groupId property
     */
    groupId?: string;
    /**
     * The id property
     */
    id?: string;
    /**
     * The renameAs property
     */
    renameAs?: string;
    /**
     * The siteCollectionId property
     */
    siteCollectionId?: string;
    /**
     * The siteId property
     */
    siteId?: string;
}
export function createCopyToNotebookPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCopyToNotebookPostRequestBody;
}
export function deserializeIntoCopyToNotebookPostRequestBody(copyToNotebookPostRequestBody: CopyToNotebookPostRequestBody | undefined = {} as CopyToNotebookPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "groupId": n => { copyToNotebookPostRequestBody.groupId = n.getStringValue(); },
        "id": n => { copyToNotebookPostRequestBody.id = n.getStringValue(); },
        "renameAs": n => { copyToNotebookPostRequestBody.renameAs = n.getStringValue(); },
        "siteCollectionId": n => { copyToNotebookPostRequestBody.siteCollectionId = n.getStringValue(); },
        "siteId": n => { copyToNotebookPostRequestBody.siteId = n.getStringValue(); },
    }
}
export function serializeCopyToNotebookPostRequestBody(writer: SerializationWriter, copyToNotebookPostRequestBody: CopyToNotebookPostRequestBody | undefined = {} as CopyToNotebookPostRequestBody) : void {
    writer.writeStringValue("groupId", copyToNotebookPostRequestBody.groupId);
    writer.writeStringValue("id", copyToNotebookPostRequestBody.id);
    writer.writeStringValue("renameAs", copyToNotebookPostRequestBody.renameAs);
    writer.writeStringValue("siteCollectionId", copyToNotebookPostRequestBody.siteCollectionId);
    writer.writeStringValue("siteId", copyToNotebookPostRequestBody.siteId);
    writer.writeAdditionalData(copyToNotebookPostRequestBody.additionalData);
}
/**
 * Provides operations to call the copyToNotebook method.
 */
export class CopyToNotebookRequestBuilder extends BaseRequestBuilder<CopyToNotebookRequestBuilder> {
    /**
     * Instantiates a new CopyToNotebookRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/users/{user%2Did}/onenote/sections/{onenoteSection%2Did}/copyToNotebook", (x, y) => new CopyToNotebookRequestBuilder(x, y));
    }
    /**
     * For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of OnenoteOperation
     * @see {@link https://learn.microsoft.com/graph/api/section-copytonotebook?view=graph-rest-1.0|Find more info here}
     */
    public post(body: CopyToNotebookPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<OnenoteOperation | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<OnenoteOperation>(requestInfo, createOnenoteOperationFromDiscriminatorValue, errorMapping);
    }
    /**
     * For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: CopyToNotebookPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeCopyToNotebookPostRequestBody);
        return requestInfo;
    }
}
/* tslint:enable */
/* eslint-enable */
