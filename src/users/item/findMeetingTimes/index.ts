// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttendeeBaseFromDiscriminatorValue, serializeAttendeeBase, type AttendeeBase } from '../../../models/attendeeBase';
import { createLocationConstraintFromDiscriminatorValue, serializeLocationConstraint, type LocationConstraint } from '../../../models/locationConstraint';
import { createMeetingTimeSuggestionsResultFromDiscriminatorValue, deserializeIntoMeetingTimeSuggestionsResult, serializeMeetingTimeSuggestionsResult, type MeetingTimeSuggestionsResult } from '../../../models/meetingTimeSuggestionsResult';
import { type ODataError } from '../../../models/oDataErrors';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError } from '../../../models/oDataErrors/oDataError';
import { createTimeConstraintFromDiscriminatorValue, serializeTimeConstraint, type TimeConstraint } from '../../../models/timeConstraint';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Duration, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFindMeetingTimesPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFindMeetingTimesPostRequestBody;
}
export function deserializeIntoFindMeetingTimesPostRequestBody(findMeetingTimesPostRequestBody: FindMeetingTimesPostRequestBody | undefined = {} as FindMeetingTimesPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "attendees": n => { findMeetingTimesPostRequestBody.attendees = n.getCollectionOfObjectValues<AttendeeBase>(createAttendeeBaseFromDiscriminatorValue); },
        "isOrganizerOptional": n => { findMeetingTimesPostRequestBody.isOrganizerOptional = n.getBooleanValue(); },
        "locationConstraint": n => { findMeetingTimesPostRequestBody.locationConstraint = n.getObjectValue<LocationConstraint>(createLocationConstraintFromDiscriminatorValue); },
        "maxCandidates": n => { findMeetingTimesPostRequestBody.maxCandidates = n.getNumberValue(); },
        "meetingDuration": n => { findMeetingTimesPostRequestBody.meetingDuration = n.getDurationValue(); },
        "minimumAttendeePercentage": n => { findMeetingTimesPostRequestBody.minimumAttendeePercentage = n.getNumberValue(); },
        "returnSuggestionReasons": n => { findMeetingTimesPostRequestBody.returnSuggestionReasons = n.getBooleanValue(); },
        "timeConstraint": n => { findMeetingTimesPostRequestBody.timeConstraint = n.getObjectValue<TimeConstraint>(createTimeConstraintFromDiscriminatorValue); },
    }
}
export interface FindMeetingTimesPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The attendees property
     */
    attendees?: AttendeeBase[];
    /**
     * The isOrganizerOptional property
     */
    isOrganizerOptional?: boolean;
    /**
     * The locationConstraint property
     */
    locationConstraint?: LocationConstraint;
    /**
     * The maxCandidates property
     */
    maxCandidates?: number;
    /**
     * The meetingDuration property
     */
    meetingDuration?: Duration;
    /**
     * The minimumAttendeePercentage property
     */
    minimumAttendeePercentage?: number;
    /**
     * The returnSuggestionReasons property
     */
    returnSuggestionReasons?: boolean;
    /**
     * The timeConstraint property
     */
    timeConstraint?: TimeConstraint;
}
export function serializeFindMeetingTimesPostRequestBody(writer: SerializationWriter, findMeetingTimesPostRequestBody: FindMeetingTimesPostRequestBody | undefined = {} as FindMeetingTimesPostRequestBody) : void {
    writer.writeCollectionOfObjectValues<AttendeeBase>("attendees", findMeetingTimesPostRequestBody.attendees, serializeAttendeeBase);
    writer.writeBooleanValue("isOrganizerOptional", findMeetingTimesPostRequestBody.isOrganizerOptional);
    writer.writeObjectValue<LocationConstraint>("locationConstraint", findMeetingTimesPostRequestBody.locationConstraint, serializeLocationConstraint);
    writer.writeNumberValue("maxCandidates", findMeetingTimesPostRequestBody.maxCandidates);
    writer.writeDurationValue("meetingDuration", findMeetingTimesPostRequestBody.meetingDuration);
    writer.writeNumberValue("minimumAttendeePercentage", findMeetingTimesPostRequestBody.minimumAttendeePercentage);
    writer.writeBooleanValue("returnSuggestionReasons", findMeetingTimesPostRequestBody.returnSuggestionReasons);
    writer.writeObjectValue<TimeConstraint>("timeConstraint", findMeetingTimesPostRequestBody.timeConstraint, serializeTimeConstraint);
    writer.writeAdditionalData(findMeetingTimesPostRequestBody.additionalData);
}
/**
 * Provides operations to call the findMeetingTimes method.
 */
export class FindMeetingTimesRequestBuilder extends BaseRequestBuilder {
    /**
     * Instantiates a new FindMeetingTimesRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/users/{user%2Did}/findMeetingTimes");
    };
    /**
     * Suggest meeting times and locations based on organizer and attendee availability, and time or location constraints specified as parameters. If findMeetingTimes cannot return any meeting suggestions, the response would indicate a reason in the emptySuggestionsReason property. Based on this value, you can better adjust the parameters and call findMeetingTimes again. The algorithm used to suggest meeting times and locations undergoes fine-tuning from time to time. In scenarios like test environments where the input parameters and calendar data remain static, expect that the suggested results may differ over time.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of MeetingTimeSuggestionsResult
     * @see {@link https://learn.microsoft.com/graph/api/user-findmeetingtimes?view=graph-rest-1.0|Find more info here}
     */
    public post(body: FindMeetingTimesPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<MeetingTimeSuggestionsResult | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<MeetingTimeSuggestionsResult>(requestInfo, createMeetingTimeSuggestionsResultFromDiscriminatorValue, errorMapping);
    };
    /**
     * Suggest meeting times and locations based on organizer and attendee availability, and time or location constraints specified as parameters. If findMeetingTimes cannot return any meeting suggestions, the response would indicate a reason in the emptySuggestionsReason property. Based on this value, you can better adjust the parameters and call findMeetingTimes again. The algorithm used to suggest meeting times and locations undergoes fine-tuning from time to time. In scenarios like test environments where the input parameters and calendar data remain static, expect that the suggested results may differ over time.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: FindMeetingTimesPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeFindMeetingTimesPostRequestBody);
        return requestInfo;
    };
    /**
     * Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
     * @param rawUrl The raw URL to use for the request builder.
     * @returns a findMeetingTimesRequestBuilder
     */
    public withUrl(rawUrl: string) : FindMeetingTimesRequestBuilder {
        if(!rawUrl) throw new Error("rawUrl cannot be undefined");
        return new FindMeetingTimesRequestBuilder(rawUrl, this.requestAdapter);
    };
}
// tslint:enable
// eslint-enable
