/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createConvertIdResultFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, ExchangeIdFormat, ExchangeIdFormatObject, serializeBaseCollectionPaginationCountResponse, serializeConvertIdResult, type BaseCollectionPaginationCountResponse, type ConvertIdResult } from '../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../models/oDataErrors/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTranslateExchangeIdsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTranslateExchangeIdsPostRequestBody;
}
export function createTranslateExchangeIdsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTranslateExchangeIdsPostResponse;
}
export function deserializeIntoTranslateExchangeIdsPostRequestBody(translateExchangeIdsPostRequestBody: TranslateExchangeIdsPostRequestBody | undefined = {} as TranslateExchangeIdsPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "inputIds": n => { translateExchangeIdsPostRequestBody.inputIds = n.getCollectionOfPrimitiveValues<string>(); },
        "sourceIdType": n => { translateExchangeIdsPostRequestBody.sourceIdType = n.getEnumValue<ExchangeIdFormat>(ExchangeIdFormatObject); },
        "targetIdType": n => { translateExchangeIdsPostRequestBody.targetIdType = n.getEnumValue<ExchangeIdFormat>(ExchangeIdFormatObject); },
    }
}
export function deserializeIntoTranslateExchangeIdsPostResponse(translateExchangeIdsPostResponse: TranslateExchangeIdsPostResponse | undefined = {} as TranslateExchangeIdsPostResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(translateExchangeIdsPostResponse),
        "value": n => { translateExchangeIdsPostResponse.value = n.getCollectionOfObjectValues<ConvertIdResult>(createConvertIdResultFromDiscriminatorValue); },
    }
}
export function serializeTranslateExchangeIdsPostRequestBody(writer: SerializationWriter, translateExchangeIdsPostRequestBody: TranslateExchangeIdsPostRequestBody | undefined = {} as TranslateExchangeIdsPostRequestBody) : void {
    writer.writeCollectionOfPrimitiveValues<string>("InputIds", translateExchangeIdsPostRequestBody.inputIds);
    writer.writeEnumValue<ExchangeIdFormat>("SourceIdType", translateExchangeIdsPostRequestBody.sourceIdType);
    writer.writeEnumValue<ExchangeIdFormat>("TargetIdType", translateExchangeIdsPostRequestBody.targetIdType);
    writer.writeAdditionalData(translateExchangeIdsPostRequestBody.additionalData);
}
export function serializeTranslateExchangeIdsPostResponse(writer: SerializationWriter, translateExchangeIdsPostResponse: TranslateExchangeIdsPostResponse | undefined = {} as TranslateExchangeIdsPostResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, translateExchangeIdsPostResponse)
    writer.writeCollectionOfObjectValues<ConvertIdResult>("value", translateExchangeIdsPostResponse.value, serializeConvertIdResult);
}
export interface TranslateExchangeIdsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The InputIds property
     */
    inputIds?: string[];
    /**
     * The SourceIdType property
     */
    sourceIdType?: ExchangeIdFormat;
    /**
     * The TargetIdType property
     */
    targetIdType?: ExchangeIdFormat;
}
export interface TranslateExchangeIdsPostResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ConvertIdResult[];
}
/**
 * Provides operations to call the translateExchangeIds method.
 */
export class TranslateExchangeIdsRequestBuilder extends BaseRequestBuilder<TranslateExchangeIdsRequestBuilder> {
    /**
     * Instantiates a new TranslateExchangeIdsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/users/{user%2Did}/translateExchangeIds", (x, y) => new TranslateExchangeIdsRequestBuilder(x, y));
    }
    /**
     * Translate identifiers of Outlook-related resources between formats.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of TranslateExchangeIdsPostResponse
     * @see {@link https://learn.microsoft.com/graph/api/user-translateexchangeids?view=graph-rest-1.0|Find more info here}
     */
    public post(body: TranslateExchangeIdsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TranslateExchangeIdsPostResponse | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<TranslateExchangeIdsPostResponse>(requestInfo, createTranslateExchangeIdsPostResponseFromDiscriminatorValue, errorMapping);
    }
    /**
     * Translate identifiers of Outlook-related resources between formats.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: TranslateExchangeIdsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeTranslateExchangeIdsPostRequestBody);
        return requestInfo;
    }
}
/* tslint:enable */
/* eslint-enable */
