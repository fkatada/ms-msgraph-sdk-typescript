// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AdminRequestBuilder } from './admin';
import { AgreementAcceptancesRequestBuilder } from './agreementAcceptances';
import { AgreementsRequestBuilder } from './agreements';
import { AppCatalogsRequestBuilder } from './appCatalogs';
import { ApplicationsRequestBuilder } from './applications';
import { ApplicationsWithAppIdRequestBuilder } from './applicationsWithAppId';
import { ApplicationTemplatesRequestBuilder } from './applicationTemplates';
import { AuditLogsRequestBuilder } from './auditLogs';
import { AuthenticationMethodConfigurationsRequestBuilder } from './authenticationMethodConfigurations';
import { AuthenticationMethodsPolicyRequestBuilder } from './authenticationMethodsPolicy';
import { CertificateBasedAuthConfigurationRequestBuilder } from './certificateBasedAuthConfiguration';
import { ChatsRequestBuilder } from './chats';
import { CommunicationsRequestBuilder } from './communications';
import { ComplianceRequestBuilder } from './compliance';
import { ConnectionsRequestBuilder } from './connections';
import { ContactsRequestBuilder } from './contacts';
import { ContractsRequestBuilder } from './contracts';
import { DataPolicyOperationsRequestBuilder } from './dataPolicyOperations';
import { DeviceAppManagementRequestBuilder } from './deviceAppManagement';
import { DeviceManagementRequestBuilder } from './deviceManagement';
import { DevicesRequestBuilder } from './devices';
import { DevicesWithDeviceIdRequestBuilder } from './devicesWithDeviceId';
import { DirectoryRequestBuilder } from './directory';
import { DirectoryObjectsRequestBuilder } from './directoryObjects';
import { DirectoryRolesRequestBuilder } from './directoryRoles';
import { DirectoryRolesWithRoleTemplateIdRequestBuilder } from './directoryRolesWithRoleTemplateId';
import { DirectoryRoleTemplatesRequestBuilder } from './directoryRoleTemplates';
import { DomainDnsRecordsRequestBuilder } from './domainDnsRecords';
import { DomainsRequestBuilder } from './domains';
import { DrivesRequestBuilder } from './drives';
import { EducationRequestBuilder } from './education';
import { EmployeeExperienceRequestBuilder } from './employeeExperience';
import { ExternalRequestBuilder } from './external';
import { FilterOperatorsRequestBuilder } from './filterOperators';
import { FunctionsRequestBuilder } from './functions';
import { GroupLifecyclePoliciesRequestBuilder } from './groupLifecyclePolicies';
import { GroupsRequestBuilder } from './groups';
import { GroupSettingsRequestBuilder } from './groupSettings';
import { GroupSettingTemplatesRequestBuilder } from './groupSettingTemplates';
import { IdentityRequestBuilder } from './identity';
import { IdentityGovernanceRequestBuilder } from './identityGovernance';
import { IdentityProtectionRequestBuilder } from './identityProtection';
import { IdentityProvidersRequestBuilder } from './identityProviders';
import { InformationProtectionRequestBuilder } from './informationProtection';
import { InvitationsRequestBuilder } from './invitations';
import { Oauth2PermissionGrantsRequestBuilder } from './oauth2PermissionGrants';
import { OrganizationRequestBuilder } from './organization';
import { PermissionGrantsRequestBuilder } from './permissionGrants';
import { PlacesRequestBuilder } from './places';
import { PlannerRequestBuilder } from './planner';
import { PoliciesRequestBuilder } from './policies';
import { PrintRequestBuilder } from './print';
import { PrivacyRequestBuilder } from './privacy';
import { ReportsRequestBuilder } from './reports';
import { RoleManagementRequestBuilder } from './roleManagement';
import { SchemaExtensionsRequestBuilder } from './schemaExtensions';
import { ScopedRoleMembershipsRequestBuilder } from './scopedRoleMemberships';
import { SearchRequestBuilder } from './search';
import { SecurityRequestBuilder } from './security';
import { ServicePrincipalsRequestBuilder } from './servicePrincipals';
import { ServicePrincipalsWithAppIdRequestBuilder } from './servicePrincipalsWithAppId';
import { SharesRequestBuilder } from './shares';
import { SitesRequestBuilder } from './sites';
import { SolutionsRequestBuilder } from './solutions';
import { SubscribedSkusRequestBuilder } from './subscribedSkus';
import { SubscriptionsRequestBuilder } from './subscriptions';
import { TeamsRequestBuilder } from './teams';
import { TeamsTemplatesRequestBuilder } from './teamsTemplates';
import { TeamworkRequestBuilder } from './teamwork';
import { TenantRelationshipsRequestBuilder } from './tenantRelationships';
import { UsersRequestBuilder } from './users';
import { BaseRequestBuilder, enableBackingStoreForSerializationWriterFactory, ParseNodeFactoryRegistry, registerDefaultDeserializer, registerDefaultSerializer, SerializationWriterFactoryRegistry, type RequestAdapter } from '@microsoft/kiota-abstractions';
import { FormParseNodeFactory, FormSerializationWriterFactory } from '@microsoft/kiota-serialization-form';
import { JsonParseNodeFactory, JsonSerializationWriterFactory } from '@microsoft/kiota-serialization-json';
import { MultipartSerializationWriterFactory } from '@microsoft/kiota-serialization-multipart';
import { TextParseNodeFactory, TextSerializationWriterFactory } from '@microsoft/kiota-serialization-text';

/**
 * The main entry point of the SDK, exposes the configuration and the fluent API.
 */
export class GraphBaseServiceClient extends BaseRequestBuilder {
    /**
     * Provides operations to manage the admin singleton.
     */
    public get admin(): AdminRequestBuilder {
        return new AdminRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of agreementAcceptance entities.
     */
    public get agreementAcceptances(): AgreementAcceptancesRequestBuilder {
        return new AgreementAcceptancesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of agreement entities.
     */
    public get agreements(): AgreementsRequestBuilder {
        return new AgreementsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the appCatalogs singleton.
     */
    public get appCatalogs(): AppCatalogsRequestBuilder {
        return new AppCatalogsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of application entities.
     */
    public get applications(): ApplicationsRequestBuilder {
        return new ApplicationsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of applicationTemplate entities.
     */
    public get applicationTemplates(): ApplicationTemplatesRequestBuilder {
        return new ApplicationTemplatesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the auditLogRoot singleton.
     */
    public get auditLogs(): AuditLogsRequestBuilder {
        return new AuditLogsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of authenticationMethodConfiguration entities.
     */
    public get authenticationMethodConfigurations(): AuthenticationMethodConfigurationsRequestBuilder {
        return new AuthenticationMethodConfigurationsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the authenticationMethodsPolicy singleton.
     */
    public get authenticationMethodsPolicy(): AuthenticationMethodsPolicyRequestBuilder {
        return new AuthenticationMethodsPolicyRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of certificateBasedAuthConfiguration entities.
     */
    public get certificateBasedAuthConfiguration(): CertificateBasedAuthConfigurationRequestBuilder {
        return new CertificateBasedAuthConfigurationRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of chat entities.
     */
    public get chats(): ChatsRequestBuilder {
        return new ChatsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the cloudCommunications singleton.
     */
    public get communications(): CommunicationsRequestBuilder {
        return new CommunicationsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the compliance singleton.
     */
    public get compliance(): ComplianceRequestBuilder {
        return new ComplianceRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of externalConnection entities.
     */
    public get connections(): ConnectionsRequestBuilder {
        return new ConnectionsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of orgContact entities.
     */
    public get contacts(): ContactsRequestBuilder {
        return new ContactsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of contract entities.
     */
    public get contracts(): ContractsRequestBuilder {
        return new ContractsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of dataPolicyOperation entities.
     */
    public get dataPolicyOperations(): DataPolicyOperationsRequestBuilder {
        return new DataPolicyOperationsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the deviceAppManagement singleton.
     */
    public get deviceAppManagement(): DeviceAppManagementRequestBuilder {
        return new DeviceAppManagementRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the deviceManagement singleton.
     */
    public get deviceManagement(): DeviceManagementRequestBuilder {
        return new DeviceManagementRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of device entities.
     */
    public get devices(): DevicesRequestBuilder {
        return new DevicesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the directory singleton.
     */
    public get directory(): DirectoryRequestBuilder {
        return new DirectoryRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of directoryObject entities.
     */
    public get directoryObjects(): DirectoryObjectsRequestBuilder {
        return new DirectoryObjectsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of directoryRole entities.
     */
    public get directoryRoles(): DirectoryRolesRequestBuilder {
        return new DirectoryRolesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of directoryRoleTemplate entities.
     */
    public get directoryRoleTemplates(): DirectoryRoleTemplatesRequestBuilder {
        return new DirectoryRoleTemplatesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of domainDnsRecord entities.
     */
    public get domainDnsRecords(): DomainDnsRecordsRequestBuilder {
        return new DomainDnsRecordsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of domain entities.
     */
    public get domains(): DomainsRequestBuilder {
        return new DomainsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of drive entities.
     */
    public get drives(): DrivesRequestBuilder {
        return new DrivesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the educationRoot singleton.
     */
    public get education(): EducationRequestBuilder {
        return new EducationRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the employeeExperience singleton.
     */
    public get employeeExperience(): EmployeeExperienceRequestBuilder {
        return new EmployeeExperienceRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the external singleton.
     */
    public get external(): ExternalRequestBuilder {
        return new ExternalRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of filterOperatorSchema entities.
     */
    public get filterOperators(): FilterOperatorsRequestBuilder {
        return new FilterOperatorsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of attributeMappingFunctionSchema entities.
     */
    public get functions(): FunctionsRequestBuilder {
        return new FunctionsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of groupLifecyclePolicy entities.
     */
    public get groupLifecyclePolicies(): GroupLifecyclePoliciesRequestBuilder {
        return new GroupLifecyclePoliciesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of group entities.
     */
    public get groups(): GroupsRequestBuilder {
        return new GroupsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of groupSetting entities.
     */
    public get groupSettings(): GroupSettingsRequestBuilder {
        return new GroupSettingsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of groupSettingTemplate entities.
     */
    public get groupSettingTemplates(): GroupSettingTemplatesRequestBuilder {
        return new GroupSettingTemplatesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the identityContainer singleton.
     */
    public get identity(): IdentityRequestBuilder {
        return new IdentityRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the identityGovernance singleton.
     */
    public get identityGovernance(): IdentityGovernanceRequestBuilder {
        return new IdentityGovernanceRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the identityProtectionRoot singleton.
     */
    public get identityProtection(): IdentityProtectionRequestBuilder {
        return new IdentityProtectionRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of identityProvider entities.
     */
    public get identityProviders(): IdentityProvidersRequestBuilder {
        return new IdentityProvidersRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the informationProtection singleton.
     */
    public get informationProtection(): InformationProtectionRequestBuilder {
        return new InformationProtectionRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of invitation entities.
     */
    public get invitations(): InvitationsRequestBuilder {
        return new InvitationsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of oAuth2PermissionGrant entities.
     */
    public get oauth2PermissionGrants(): Oauth2PermissionGrantsRequestBuilder {
        return new Oauth2PermissionGrantsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of organization entities.
     */
    public get organization(): OrganizationRequestBuilder {
        return new OrganizationRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of resourceSpecificPermissionGrant entities.
     */
    public get permissionGrants(): PermissionGrantsRequestBuilder {
        return new PermissionGrantsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * The places property
     */
    public get places(): PlacesRequestBuilder {
        return new PlacesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the planner singleton.
     */
    public get planner(): PlannerRequestBuilder {
        return new PlannerRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the policyRoot singleton.
     */
    public get policies(): PoliciesRequestBuilder {
        return new PoliciesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the print singleton.
     */
    public get print(): PrintRequestBuilder {
        return new PrintRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the privacy singleton.
     */
    public get privacy(): PrivacyRequestBuilder {
        return new PrivacyRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the reportRoot singleton.
     */
    public get reports(): ReportsRequestBuilder {
        return new ReportsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the roleManagement singleton.
     */
    public get roleManagement(): RoleManagementRequestBuilder {
        return new RoleManagementRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of schemaExtension entities.
     */
    public get schemaExtensions(): SchemaExtensionsRequestBuilder {
        return new SchemaExtensionsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of scopedRoleMembership entities.
     */
    public get scopedRoleMemberships(): ScopedRoleMembershipsRequestBuilder {
        return new ScopedRoleMembershipsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the searchEntity singleton.
     */
    public get search(): SearchRequestBuilder {
        return new SearchRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the security singleton.
     */
    public get security(): SecurityRequestBuilder {
        return new SecurityRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of servicePrincipal entities.
     */
    public get servicePrincipals(): ServicePrincipalsRequestBuilder {
        return new ServicePrincipalsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of sharedDriveItem entities.
     */
    public get shares(): SharesRequestBuilder {
        return new SharesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of site entities.
     */
    public get sites(): SitesRequestBuilder {
        return new SitesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the solutionsRoot singleton.
     */
    public get solutions(): SolutionsRequestBuilder {
        return new SolutionsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of subscribedSku entities.
     */
    public get subscribedSkus(): SubscribedSkusRequestBuilder {
        return new SubscribedSkusRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of subscription entities.
     */
    public get subscriptions(): SubscriptionsRequestBuilder {
        return new SubscriptionsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of team entities.
     */
    public get teams(): TeamsRequestBuilder {
        return new TeamsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of teamsTemplate entities.
     */
    public get teamsTemplates(): TeamsTemplatesRequestBuilder {
        return new TeamsTemplatesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the teamwork singleton.
     */
    public get teamwork(): TeamworkRequestBuilder {
        return new TeamworkRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the tenantRelationship singleton.
     */
    public get tenantRelationships(): TenantRelationshipsRequestBuilder {
        return new TenantRelationshipsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of user entities.
     */
    public get users(): UsersRequestBuilder {
        return new UsersRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the collection of application entities.
     * @param appId Alternate key of application
     * @returns a applicationsWithAppIdRequestBuilder
     */
    public applicationsWithAppId(appId: string | undefined) : ApplicationsWithAppIdRequestBuilder {
        if(!appId) throw new Error("appId cannot be undefined");
        return new ApplicationsWithAppIdRequestBuilder(this.pathParameters, this.requestAdapter, appId);
    };
    /**
     * Instantiates a new GraphBaseServiceClient and sets the default values.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(requestAdapter: RequestAdapter) {
        super({}, requestAdapter, "{+baseurl}");
        registerDefaultSerializer(JsonSerializationWriterFactory);
        registerDefaultSerializer(TextSerializationWriterFactory);
        registerDefaultSerializer(FormSerializationWriterFactory);
        registerDefaultSerializer(MultipartSerializationWriterFactory);
        registerDefaultDeserializer(JsonParseNodeFactory);
        registerDefaultDeserializer(TextParseNodeFactory);
        registerDefaultDeserializer(FormParseNodeFactory);
        if (requestAdapter.baseUrl === undefined || requestAdapter.baseUrl === "") {
            requestAdapter.baseUrl = "https://graph.microsoft.com/v1.0";
        }
        this.pathParameters["baseurl"] = requestAdapter.baseUrl;
    };
    /**
     * Provides operations to manage the collection of device entities.
     * @param deviceId Alternate key of device
     * @returns a devicesWithDeviceIdRequestBuilder
     */
    public devicesWithDeviceId(deviceId: string | undefined) : DevicesWithDeviceIdRequestBuilder {
        if(!deviceId) throw new Error("deviceId cannot be undefined");
        return new DevicesWithDeviceIdRequestBuilder(this.pathParameters, this.requestAdapter, deviceId);
    };
    /**
     * Provides operations to manage the collection of directoryRole entities.
     * @param roleTemplateId Alternate key of directoryRole
     * @returns a directoryRolesWithRoleTemplateIdRequestBuilder
     */
    public directoryRolesWithRoleTemplateId(roleTemplateId: string | undefined) : DirectoryRolesWithRoleTemplateIdRequestBuilder {
        if(!roleTemplateId) throw new Error("roleTemplateId cannot be undefined");
        return new DirectoryRolesWithRoleTemplateIdRequestBuilder(this.pathParameters, this.requestAdapter, roleTemplateId);
    };
    /**
     * Provides operations to manage the collection of servicePrincipal entities.
     * @param appId Alternate key of servicePrincipal
     * @returns a servicePrincipalsWithAppIdRequestBuilder
     */
    public servicePrincipalsWithAppId(appId: string | undefined) : ServicePrincipalsWithAppIdRequestBuilder {
        if(!appId) throw new Error("appId cannot be undefined");
        return new ServicePrincipalsWithAppIdRequestBuilder(this.pathParameters, this.requestAdapter, appId);
    };
}
// tslint:enable
// eslint-enable
