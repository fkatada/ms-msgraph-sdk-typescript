/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPlaceFromDiscriminatorValue, deserializeIntoPlace, serializePlace, type Place } from '../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../models/oDataErrors/';
import { GraphRoomRequestBuilder } from './graphRoom/';
import { GraphRoomListRequestBuilder } from './graphRoomList/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of place entities.
 */
export class PlaceItemRequestBuilder extends BaseRequestBuilder<PlaceItemRequestBuilder> {
    /**
     * Casts the previous resource to room.
     */
    public get graphRoom(): GraphRoomRequestBuilder {
        return new GraphRoomRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Casts the previous resource to roomList.
     */
    public get graphRoomList(): GraphRoomListRequestBuilder {
        return new GraphRoomListRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Instantiates a new PlaceItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/places/{place%2Did}", (x, y) => new PlaceItemRequestBuilder(x, y));
    }
    /**
     * Delete entity from places
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
    public delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void> {
        const requestInfo = this.toDeleteRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendNoResponseContentAsync(requestInfo, errorMapping);
    }
    /**
     * Update the properties of place object, which can be a room or roomList. You can identify the room or roomList by specifying the id or emailAddress property.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Place
     * @see {@link https://learn.microsoft.com/graph/api/place-update?view=graph-rest-1.0|Find more info here}
     */
    public patch(body: Place, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Place | undefined> {
        const requestInfo = this.toPatchRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<Place>(requestInfo, createPlaceFromDiscriminatorValue, errorMapping);
    }
    /**
     * Delete entity from places
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.DELETE, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    }
    /**
     * Update the properties of place object, which can be a room or roomList. You can identify the room or roomList by specifying the id or emailAddress property.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPatchRequestInformation(body: Place, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.PATCH, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializePlace);
        return requestInfo;
    }
}
/* tslint:enable */
/* eslint-enable */
